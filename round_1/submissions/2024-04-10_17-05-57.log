Sandbox logs:
{
  "sandboxLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"1d301a85-c3b8-40db-bd23-622392a3ccd3\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"1d301a85-c3b8-40db-bd23-622392a3ccd3\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "timestamp": 0
}
{
  "sandboxLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"16260387-710f-4004-b8ef-bed459cacc38\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"16260387-710f-4004-b8ef-bed459cacc38\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "timestamp": 100
}
{
  "sandboxLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"253dbd03-5065-42a8-b19d-b9d9567dbb2b\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"253dbd03-5065-42a8-b19d-b9d9567dbb2b\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "timestamp": 200
}
{
  "sandboxLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"0a9be0ad-8f5c-4ac8-874e-044cad161b84\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"0a9be0ad-8f5c-4ac8-874e-044cad161b84\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "timestamp": 300
}
{
  "sandboxLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"84bf2185-3d41-4df3-b535-05bafaffb70e\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"84bf2185-3d41-4df3-b535-05bafaffb70e\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "timestamp": 400
}
{
  "sandboxLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"8fa479a6-2182-4130-a6b0-9439450511f6\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"8fa479a6-2182-4130-a6b0-9439450511f6\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "timestamp": 500
}
{
  "sandboxLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"e2322d77-d20f-46c4-bee6-4686de523be9\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"e2322d77-d20f-46c4-bee6-4686de523be9\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "timestamp": 600
}
{
  "sandboxLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"31590801-82c7-4e2a-8b26-f82635ee352a\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"31590801-82c7-4e2a-8b26-f82635ee352a\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "timestamp": 700
}
{
  "sandboxLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"cfc1012a-a481-4945-9a3b-1b44681ee3fe\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"cfc1012a-a481-4945-9a3b-1b44681ee3fe\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "timestamp": 800
}
{
  "sandboxLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"20b11cc6-7203-4755-9d87-cf029ab22c46\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"20b11cc6-7203-4755-9d87-cf029ab22c46\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "timestamp": 900
}
{
  "sandboxLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"952f4acf-6d80-4428-b1d9-7575ffe07a5d\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"952f4acf-6d80-4428-b1d9-7575ffe07a5d\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "timestamp": 1000
}
{
  "sandboxLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"6f31a4ef-0344-4651-a91b-5a318016869e\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"6f31a4ef-0344-4651-a91b-5a318016869e\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "timestamp": 1100
}
{
  "sandboxLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"35f458f5-3774-4306-b2d2-efb1d9ac2fcf\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"35f458f5-3774-4306-b2d2-efb1d9ac2fcf\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "timestamp": 1200
}
{
  "sandboxLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"a0700af3-9683-4a08-9a09-3c1581c0546d\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"a0700af3-9683-4a08-9a09-3c1581c0546d\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "timestamp": 1300
}
{
  "sandboxLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"e87e57e6-441c-4554-b155-cc0ca2ffaeba\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"e87e57e6-441c-4554-b155-cc0ca2ffaeba\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "timestamp": 1400
}
{
  "sandboxLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"6be5dd0d-38d5-438a-ae3f-3d5ccbb8d5da\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"6be5dd0d-38d5-438a-ae3f-3d5ccbb8d5da\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "timestamp": 1500
}
{
  "sandboxLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"6ce4e8ec-6bc7-4c65-baa2-041c7afc1bd4\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"6ce4e8ec-6bc7-4c65-baa2-041c7afc1bd4\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "timestamp": 1600
}
{
  "sandboxLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"eab11a4d-1d43-4903-b534-4980fcf64a98\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"eab11a4d-1d43-4903-b534-4980fcf64a98\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "timestamp": 1700
}
{
  "sandboxLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"d9cb38a7-cdc3-437b-a7fc-bc8116deb23c\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"d9cb38a7-cdc3-437b-a7fc-bc8116deb23c\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "timestamp": 1800
}
{
  "sandboxLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"97b6f664-b319-46b7-9b12-a7e5d27dc217\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"97b6f664-b319-46b7-9b12-a7e5d27dc217\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "timestamp": 1900
}
{
  "sandboxLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"9ed248c7-0fa9-41a4-8b81-fd383c368904\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"9ed248c7-0fa9-41a4-8b81-fd383c368904\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "timestamp": 2000
}
{
  "sandboxLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"625d5ada-3383-400c-a528-2bd132d4ac1c\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"625d5ada-3383-400c-a528-2bd132d4ac1c\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "timestamp": 2100
}
{
  "sandboxLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"0a29dfff-d618-496b-9cbd-33d3f13837d6\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"0a29dfff-d618-496b-9cbd-33d3f13837d6\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "timestamp": 2200
}
{
  "sandboxLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"cb01ac34-35cf-406a-9ea2-4d5fefcdf1fb\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"cb01ac34-35cf-406a-9ea2-4d5fefcdf1fb\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "timestamp": 2300
}
{
  "sandboxLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"a0297a99-11f7-4ccd-8a5a-9064a5c64012\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"a0297a99-11f7-4ccd-8a5a-9064a5c64012\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "timestamp": 2400
}
{
  "sandboxLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"77f49ace-65d4-4657-9585-a387a751e70c\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"77f49ace-65d4-4657-9585-a387a751e70c\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "timestamp": 2500
}
{
  "sandboxLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"1bf8158f-74bd-4054-8ddd-0be4c1dbf884\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"1bf8158f-74bd-4054-8ddd-0be4c1dbf884\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "timestamp": 2600
}
{
  "sandboxLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"415f9e3a-95c1-4e5c-8368-c7e22d952f79\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"415f9e3a-95c1-4e5c-8368-c7e22d952f79\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "timestamp": 2700
}
{
  "sandboxLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"3e54d7bf-4723-49ab-841e-14553ae068dd\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"3e54d7bf-4723-49ab-841e-14553ae068dd\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "timestamp": 2800
}
{
  "sandboxLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"d731d0e3-a72e-4a3c-b104-f6b4e0f56e7f\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"d731d0e3-a72e-4a3c-b104-f6b4e0f56e7f\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "timestamp": 2900
}
{
  "sandboxLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"969a7a28-86d8-4572-a762-0f84e13b0a1d\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"969a7a28-86d8-4572-a762-0f84e13b0a1d\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "timestamp": 3000
}
{
  "sandboxLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"d08955f0-92a9-4dbd-a49e-bce401488716\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"d08955f0-92a9-4dbd-a49e-bce401488716\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "timestamp": 3100
}
{
  "sandboxLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"401776d9-c838-4971-9be8-824c7bca2507\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"401776d9-c838-4971-9be8-824c7bca2507\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "timestamp": 3200
}
{
  "sandboxLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"d4fa6b3c-ad53-4208-be53-4b8039f58fd2\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"d4fa6b3c-ad53-4208-be53-4b8039f58fd2\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "timestamp": 3300
}
{
  "sandboxLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"617950d6-9886-498b-a003-609f436a5416\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"617950d6-9886-498b-a003-609f436a5416\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "timestamp": 3400
}
{
  "sandboxLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"15c996b4-92ab-4947-acb3-bc2628720d1e\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"15c996b4-92ab-4947-acb3-bc2628720d1e\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "timestamp": 3500
}
{
  "sandboxLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"7286bd3a-79aa-4e4d-ac24-d8ecf6ef2e0a\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"7286bd3a-79aa-4e4d-ac24-d8ecf6ef2e0a\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "timestamp": 3600
}
{
  "sandboxLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"a8ac8b8b-a5fd-4700-885b-9ba5310f1eee\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"a8ac8b8b-a5fd-4700-885b-9ba5310f1eee\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "timestamp": 3700
}
{
  "sandboxLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"17680e35-61eb-460b-83b3-6d25f07ac3d0\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"17680e35-61eb-460b-83b3-6d25f07ac3d0\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "timestamp": 3800
}
{
  "sandboxLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"05810bde-94a4-4699-803b-6b90564b4377\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"05810bde-94a4-4699-803b-6b90564b4377\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "timestamp": 3900
}
{
  "sandboxLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"b600c3a1-7d6c-432d-9177-e28e7115e26d\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"b600c3a1-7d6c-432d-9177-e28e7115e26d\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "timestamp": 4000
}
{
  "sandboxLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"b6314ee1-9c66-4359-9fd5-dffae0de274e\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"b6314ee1-9c66-4359-9fd5-dffae0de274e\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "timestamp": 4100
}
{
  "sandboxLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"f77ca65f-8558-41d6-a891-d43a7c573cfc\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"f77ca65f-8558-41d6-a891-d43a7c573cfc\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "timestamp": 4200
}
{
  "sandboxLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"13ef15f9-3744-4b65-a766-07a7dd088d76\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"13ef15f9-3744-4b65-a766-07a7dd088d76\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "timestamp": 4300
}
{
  "sandboxLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"075172df-c105-421a-8d80-8f6131f58c74\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"075172df-c105-421a-8d80-8f6131f58c74\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "timestamp": 4400
}
{
  "sandboxLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"d992efbe-4c2a-4d3f-95bc-7285e790c4e6\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"d992efbe-4c2a-4d3f-95bc-7285e790c4e6\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "timestamp": 4500
}
{
  "sandboxLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"9571959a-efff-49f9-9c3f-6cbaffa928fc\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"9571959a-efff-49f9-9c3f-6cbaffa928fc\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "timestamp": 4600
}
{
  "sandboxLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"3a5e636e-53cc-4aee-9033-262bed6b4bd4\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"3a5e636e-53cc-4aee-9033-262bed6b4bd4\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "timestamp": 4700
}
{
  "sandboxLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"06d1a689-b278-47b4-bede-4f3f21c214a3\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"06d1a689-b278-47b4-bede-4f3f21c214a3\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "timestamp": 4800
}
{
  "sandboxLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"1085a1cd-6f97-4c20-b3ed-40a82cb9932c\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"1085a1cd-6f97-4c20-b3ed-40a82cb9932c\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "timestamp": 4900
}
{
  "sandboxLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"987e2a70-833e-4118-9b00-d7961b90ed78\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"987e2a70-833e-4118-9b00-d7961b90ed78\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "timestamp": 5000
}
{
  "sandboxLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"4da7eefa-bfa3-4074-9b87-13d5adce3742\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"4da7eefa-bfa3-4074-9b87-13d5adce3742\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "timestamp": 5100
}
{
  "sandboxLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"45305609-20db-4e46-8881-95913b123875\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"45305609-20db-4e46-8881-95913b123875\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "timestamp": 5200
}
{
  "sandboxLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"f18137a8-e935-4748-82be-737fb25aeb28\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"f18137a8-e935-4748-82be-737fb25aeb28\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "timestamp": 5300
}
{
  "sandboxLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"cad8064d-2fba-4332-92e0-0d570dedf1b9\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"cad8064d-2fba-4332-92e0-0d570dedf1b9\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "timestamp": 5400
}
{
  "sandboxLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"70217929-aa30-4c99-8471-989b33551122\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"70217929-aa30-4c99-8471-989b33551122\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "timestamp": 5500
}
{
  "sandboxLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"1ae1bb43-cb1d-4bbe-bf6b-fbc7b604f776\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"1ae1bb43-cb1d-4bbe-bf6b-fbc7b604f776\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "timestamp": 5600
}
{
  "sandboxLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"e6756092-cda0-416a-8e9f-bfd556f57139\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"e6756092-cda0-416a-8e9f-bfd556f57139\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "timestamp": 5700
}
{
  "sandboxLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"3095b955-922b-47e7-9eea-8ab9ea67f0d8\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"3095b955-922b-47e7-9eea-8ab9ea67f0d8\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "timestamp": 5800
}
{
  "sandboxLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"92070447-5d4e-4f62-98da-e8f947847a1e\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"92070447-5d4e-4f62-98da-e8f947847a1e\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "timestamp": 5900
}
{
  "sandboxLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"c30c316c-9e75-4a3f-8195-fc9874727fc2\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"c30c316c-9e75-4a3f-8195-fc9874727fc2\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "timestamp": 6000
}
{
  "sandboxLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"05bc2ddc-425b-442d-a3ee-68afd4d81cea\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"05bc2ddc-425b-442d-a3ee-68afd4d81cea\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "timestamp": 6100
}
{
  "sandboxLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"b15e6561-10fc-4286-8285-62e828ac35e1\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"b15e6561-10fc-4286-8285-62e828ac35e1\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "timestamp": 6200
}
{
  "sandboxLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"fc276c56-b8a1-4a93-befe-e437282676ec\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"fc276c56-b8a1-4a93-befe-e437282676ec\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "timestamp": 6300
}
{
  "sandboxLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"af1175b9-0df6-43bf-861d-0277cb55a631\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"af1175b9-0df6-43bf-861d-0277cb55a631\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "timestamp": 6400
}
{
  "sandboxLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"fa00cb22-975f-4ff9-bd97-20c8964dbc76\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"fa00cb22-975f-4ff9-bd97-20c8964dbc76\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "timestamp": 6500
}
{
  "sandboxLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"93650910-e47f-4e5c-b3fe-332dcae42561\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"93650910-e47f-4e5c-b3fe-332dcae42561\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "timestamp": 6600
}
{
  "sandboxLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"b5a51898-03f5-4082-80e9-003c4ab4c4ce\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"b5a51898-03f5-4082-80e9-003c4ab4c4ce\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "timestamp": 6700
}
{
  "sandboxLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"9d0a7030-5e90-4f14-8ed7-ce90ce652ee3\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"9d0a7030-5e90-4f14-8ed7-ce90ce652ee3\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "timestamp": 6800
}
{
  "sandboxLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"86637553-6635-4ce3-b53b-d8903d4e4d38\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"86637553-6635-4ce3-b53b-d8903d4e4d38\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "timestamp": 6900
}
{
  "sandboxLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"eb7e2032-748f-4d67-a64d-b3c68cf80535\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"eb7e2032-748f-4d67-a64d-b3c68cf80535\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "timestamp": 7000
}
{
  "sandboxLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"60d9d7cc-7fa9-4d0f-97bf-451df1344b2d\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"60d9d7cc-7fa9-4d0f-97bf-451df1344b2d\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "timestamp": 7100
}
{
  "sandboxLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"58566d66-8033-4143-8fab-67ef9323f590\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"58566d66-8033-4143-8fab-67ef9323f590\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "timestamp": 7200
}
{
  "sandboxLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"46a04c11-e710-4c62-912a-cea6ffdb1ee4\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"46a04c11-e710-4c62-912a-cea6ffdb1ee4\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "timestamp": 7300
}
{
  "sandboxLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"65a31e20-0f88-424b-8636-372d36f39e84\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"65a31e20-0f88-424b-8636-372d36f39e84\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "timestamp": 7400
}
{
  "sandboxLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"db0dc880-0ca7-4980-bc02-2afda46c001a\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"db0dc880-0ca7-4980-bc02-2afda46c001a\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "timestamp": 7500
}
{
  "sandboxLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"1bbc8326-7be9-4a6f-916e-bf2542a41da4\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"1bbc8326-7be9-4a6f-916e-bf2542a41da4\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "timestamp": 7600
}
{
  "sandboxLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"aa844dce-f9e5-41ae-a81a-2ec180fd6ae9\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"aa844dce-f9e5-41ae-a81a-2ec180fd6ae9\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "timestamp": 7700
}
{
  "sandboxLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"442a47c5-edbb-4047-b31b-7e89361a4be2\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"442a47c5-edbb-4047-b31b-7e89361a4be2\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "timestamp": 7800
}
{
  "sandboxLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"ed540a31-2f32-494b-b673-96ea465e916b\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"ed540a31-2f32-494b-b673-96ea465e916b\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "timestamp": 7900
}
{
  "sandboxLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"7ad3557d-bb9c-4362-be01-774cc3fbed9c\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"7ad3557d-bb9c-4362-be01-774cc3fbed9c\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "timestamp": 8000
}
{
  "sandboxLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"63a4e372-20f9-4b49-8575-978bd14c0617\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"63a4e372-20f9-4b49-8575-978bd14c0617\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "timestamp": 8100
}
{
  "sandboxLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"4991e628-9325-44c8-b517-94a924449e40\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"4991e628-9325-44c8-b517-94a924449e40\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "timestamp": 8200
}
{
  "sandboxLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"b714a627-4d5e-4397-9f58-49ede8bbaca8\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"b714a627-4d5e-4397-9f58-49ede8bbaca8\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "timestamp": 8300
}
{
  "sandboxLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"e4cfcc07-b25d-43d8-b98a-3e6a42982cc1\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"e4cfcc07-b25d-43d8-b98a-3e6a42982cc1\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "timestamp": 8400
}
{
  "sandboxLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"a3c012b6-874a-46ea-ba6d-3b49c5bd45d2\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"a3c012b6-874a-46ea-ba6d-3b49c5bd45d2\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "timestamp": 8500
}
{
  "sandboxLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"3939faa4-40bb-47d2-95c9-d31c096e77c3\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"3939faa4-40bb-47d2-95c9-d31c096e77c3\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "timestamp": 8600
}
{
  "sandboxLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"9894e01d-1408-4032-bd4d-756e2df50a95\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"9894e01d-1408-4032-bd4d-756e2df50a95\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "timestamp": 8700
}
{
  "sandboxLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"db222d7f-567d-401e-bc37-2ba1c12c7bbe\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"db222d7f-567d-401e-bc37-2ba1c12c7bbe\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "timestamp": 8800
}
{
  "sandboxLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"38a9b1a8-f767-4401-bb8d-630f38f5b5d3\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"38a9b1a8-f767-4401-bb8d-630f38f5b5d3\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "timestamp": 8900
}
{
  "sandboxLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"6b4546d9-21ea-4a95-91f6-d85bde565f8a\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"6b4546d9-21ea-4a95-91f6-d85bde565f8a\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "timestamp": 9000
}
{
  "sandboxLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"310fa9d3-b465-4bab-8abf-2697602d086c\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"310fa9d3-b465-4bab-8abf-2697602d086c\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "timestamp": 9100
}
{
  "sandboxLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"cebaa9d0-7613-4621-8354-6aff00140090\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"cebaa9d0-7613-4621-8354-6aff00140090\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "timestamp": 9200
}
{
  "sandboxLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"d23ccec7-0d18-4da6-a0fb-e80ae64c2f4c\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"d23ccec7-0d18-4da6-a0fb-e80ae64c2f4c\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "timestamp": 9300
}
{
  "sandboxLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"b2a09181-4266-4c4a-a8ea-4ffad394a4d2\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"b2a09181-4266-4c4a-a8ea-4ffad394a4d2\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "timestamp": 9400
}
{
  "sandboxLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"dd2eda95-176c-4ee8-99fa-c0484372b567\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"dd2eda95-176c-4ee8-99fa-c0484372b567\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "timestamp": 9500
}
{
  "sandboxLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"01445884-6891-4a5a-ad02-9721cead8f01\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"01445884-6891-4a5a-ad02-9721cead8f01\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "timestamp": 9600
}
{
  "sandboxLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"ac039e49-21e7-42d2-956c-e9b8435a5c24\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"ac039e49-21e7-42d2-956c-e9b8435a5c24\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "timestamp": 9700
}
{
  "sandboxLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"1633a469-f7f6-4054-9c48-c36aeaab3d87\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"1633a469-f7f6-4054-9c48-c36aeaab3d87\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "timestamp": 9800
}
{
  "sandboxLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"234186f7-3afd-4041-a9db-0beae8716067\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"234186f7-3afd-4041-a9db-0beae8716067\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "timestamp": 9900
}
{
  "sandboxLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"400a31e5-e35b-490a-bbef-9e12ba7660e8\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "lambdaLog": "{\"errorMessage\": \"unsupported operand type(s) for *: 'int' and 'NoneType'\", \"errorType\": \"TypeError\", \"requestId\": \"400a31e5-e35b-490a-bbef-9e12ba7660e8\", \"stackTrace\": [\"  File \\\"/var/task/app.py\\\", line 31, in lambda_handler\\n    orders, conversion, traderData = trader.run(trading_state)\\n\", \"  File \\\"/var/task/trader.py\\\", line 335, in run\\n    f\\\"\\\\tProduct {product}, Position {self.get_position(product, state)}, Midprice {self.get_mid_price(product, state)}, Value {self.get_value_on_product(product, state)}, EMA {self.ema_prices[product]}\\\"\\n\", \"  File \\\"/var/task/trader.py\\\", line 87, in get_value_on_product\\n    return self.get_position(product, state) * self.get_mid_price(product, state)\\n\"]}",
  "timestamp": 10000
}
{
  "sandboxLog": "Lambda errors have reached maximum value for submission d6c354cf-a3cc-413c-a3fa-89470cb3c5e9",
  "lambdaLog": null,
  "timestamp": 91970
}



Activities log:
day;timestamp;product;bid_price_1;bid_volume_1;bid_price_2;bid_volume_2;bid_price_3;bid_volume_3;ask_price_1;ask_volume_1;ask_price_2;ask_volume_2;ask_price_3;ask_volume_3;mid_price;profit_and_loss




Trade History:
null